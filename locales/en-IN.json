{
  "common": {
    "success": "The operation was completed successfully.",
    "failure": "The operation failed.",
    "missingParams": "Required parameters are missing.",
    "internalError": "An internal server error occurred.",
    "noRecords": "No records were found.",
    "notFound": "No document was found with the specified ID.",
    "taskStatusNotFound": "No task status was found.",
    "taskPriorityNotFound": "No task priority was found.",
    "permissionNotFound": "No permission was found.",
    "emailTemplateNotFound": "The email template was not found.",
    "systemTemplateDeleteNotAllowed": "This is a system-defined template and cannot be deleted by the user.",
    "serverError": "A server error occurred.",
    "companyIdMissing": "The company ID was not found in cookies.",
    "incomeTaxSectionsNotFound": "Income tax sections were not found for the specified company.",
    "incomeTaxSectionNotFound": "The income tax section was not found.",
    "incomeTaxComponantNotFound": "The income tax component was not found.",
    "userStateNotFound": "No user state was found with the specified key.",
    "invalidLogLevels": "Log levels must be an array of strings.",
    "testLogSuccess": "The test log was executed successfully.",
    "requiredFieldsMissing": "The fields userId, machineId, and isOnline are required.",
    "recordNotFound": "No record was found with the specified ID.",
    "stateNotFound": "State is missing."
  },
  "appWebsite": {
    "addSuccess": "The app/website record was added successfully for user {userId}.",
    "addFailure": "Failed to add the app/website record.",
    "deleteSuccess": "The app/website record {recordId} was deleted successfully.",
    "deleteFailure": "Failed to delete the app/website record.",
    "getByIdSuccess": "The app/website record {recordId} was retrieved successfully.",
    "getByIdFailure": "Failed to retrieve the app/website record.",
    "updateSuccess": "The app/website record {recordId} was updated successfully.",
    "updateFailure": "Failed to update the app/website record.",
    "getByIdAndDateSuccess": "The app/website record {recordId} for date {date} was retrieved successfully.",
    "getByIdAndDateFailure": "Failed to retrieve the app/website record for the specified date.",
    "getAllByDateSuccess": "All app/website records for date {date} were retrieved successfully.",
    "getAllByDateFailure": "Failed to retrieve app/website records for the specified date.",
    "getUserProductivityAppsSuccess": "Productivity apps were retrieved successfully for user {userId}.",
    "getUserProductivityAppsFailure": "Failed to retrieve productivity apps.",
    "getProductivitiesSuccess": "All productivity records were retrieved successfully.",
    "getProductivitiesFailure": "Failed to retrieve productivity records.",
    "getProductivityByIdSuccess": "The productivity record {recordId} was retrieved successfully.",
    "getProductivityByIdFailure": "Failed to retrieve the productivity record.",
    "addProductivitySuccess": "The productivity record was added successfully.",
    "addProductivityFailure": "Failed to add the productivity record.",
    "updateProductivitySuccess": "The productivity record {recordId} was updated successfully.",
    "updateProductivityFailure": "Failed to update the productivity record.",
    "deleteProductivitySuccess": "The productivity record {recordId} was deleted successfully.",
    "deleteProductivityFailure": "Failed to delete the productivity record.",
    "addBrowserHistorySuccess": "The browser history record was added successfully.",
    "addBrowserHistoryFailure": "Failed to add the browser history record.",
    "deleteBrowserHistorySuccess": "The browser history record {recordId} was deleted successfully.",
    "deleteBrowserHistoryFailure": "Failed to delete the browser history record.",
    "getBrowserHistorySuccess": "Browser history records were retrieved successfully.",
    "getBrowserHistoryFailure": "Failed to retrieve browser history records."
  },
  "assetsManagement": {
    "addAssetTypeSuccess": "The asset type '{typeName}' was created successfully.",
    "addAssetTypeFailure": "Failed to create the asset type.",
    "getAssetTypesSuccess": "The asset type {recordId} was retrieved successfully.",
    "updateAssetTypeSuccess": "The asset type {recordId} was updated successfully.",
    "updateAssetTypeFailure": "Failed to update the asset type.",
    "deleteAssetTypeSuccess": "The asset type {recordId} was deleted successfully.",
    "deleteAssetTypeBlocked": "The asset type cannot be deleted as it is associated with existing assets.",
    "getAllAssetTypesSuccess": "All asset types were retrieved successfully.",
    "getAssetAttributeValueSuccess": "The asset attribute value {recordId} was retrieved successfully.",
    "updateAssetAttributeValueSuccess": "The asset attribute value {recordId} was updated successfully.",
    "deleteAssetAttributeValuesSuccess": "Asset attribute values for asset {assetId} were deleted successfully.",
    "getAllAssetAttributeValuesSuccess": "All asset attribute values were retrieved successfully.",
    "createAssetAttributeValueSuccess": "The asset attribute value was created successfully for asset {assetId}.",
    "deleteAssetAttributeValueSuccess": "The asset attribute value {recordId} was deleted successfully.",
    "createAssetStatusSuccess": "The asset status '{statusName}' was created successfully.",
    "getAssetStatusSuccess": "The asset status {recordId} was retrieved successfully.",
    "updateAssetStatusSuccess": "The asset status {recordId} was updated successfully.",
    "deleteAssetStatusSuccess": "The asset status {recordId} was deleted successfully.",
    "deleteAssetStatusBlocked": "The asset status cannot be deleted as it is associated with existing assets.",
    "getAllAssetStatusesSuccess": "All asset statuses were retrieved successfully.",
    "createCustomAttributeSuccess": "The custom attribute '{attributeName}' was created successfully.",
    "getCustomAttributeSuccess": "The custom attribute {recordId} was retrieved successfully.",
    "updateCustomAttributeSuccess": "The custom attribute {recordId} was updated successfully.",
    "deleteCustomAttributeSuccess": "The custom attribute {recordId} was deleted successfully.",
    "deleteCustomAttributeBlocked": "The custom attribute cannot be deleted as it is currently in use.",
    "deleteCustomAttributeByAssetTypeSuccess": "Custom attributes for asset type {assetTypeId} were deleted successfully.",
    "getAllCustomAttributesSuccess": "All custom attributes were retrieved successfully.",
    "addCustomAttributesSuccess": "Custom attributes were added successfully for asset type {assetTypeId}.",
    "getAssetCustomAttributesSuccess": "Custom attributes for asset type {assetTypeId} were retrieved successfully.",
    "createEmployeeAssetSuccess": "The employee asset was created successfully.",
    "getEmployeeAssetSuccess": "Employee assets for employee {employeeId} were retrieved successfully.",
    "updateEmployeeAssetSuccess": "The employee asset {recordId} was updated successfully.",
    "deleteEmployeeAssetSuccess": "The employee asset for employee {employeeId} was deleted successfully.",
    "getAllEmployeeAssetsSuccess": "All employee assets were retrieved successfully.",
    "createVendorSuccess": "The vendor '{vendorName}' was created successfully.",
    "getVendorSuccess": "The vendor {recordId} was retrieved successfully.",
    "updateVendorSuccess": "The vendor {recordId} was updated successfully.",
    "deleteVendorSuccess": "The vendor {recordId} was deleted successfully.",
    "getAllVendorsSuccess": "All vendors were retrieved successfully.",
    "addVendorAssetSuccess": "The vendor asset was added successfully.",
    "getVendorAssetSuccess": "The vendor asset {recordId} was retrieved successfully.",
    "updateVendorAssetSuccess": "The vendor asset {recordId} was updated successfully.",
    "deleteVendorAssetSuccess": "The vendor asset {recordId} was deleted successfully.",
    "getAllVendorAssetsSuccess": "All vendor assets were retrieved successfully.",
    "addAssetSuccess": "The asset '{assetName}' was added successfully.",
    "getAssetSuccess": "The asset {recordId} was retrieved successfully.",
    "updateAssetSuccess": "The asset {recordId} was updated successfully.",
    "deleteAssetSuccess": "The asset {recordId} was deleted successfully.",
    "deleteAssetBlocked": "The asset cannot be deleted as it is currently in use.",
    "deleteAssetConflict": "The selected asset has an assigned status and cannot be deleted.",
    "getAllAssetsSuccess": "All assets were retrieved successfully.",
    "getAllAssetsByAssetTypeSuccess": "Assets for asset type {assetTypeId} were retrieved successfully.",
    "getUnassignedAssetsForUserSuccess": "Unassigned assets for user {userId} were retrieved successfully.",
    "getUnassignedAssetsSuccess": "All unassigned assets were retrieved successfully.",
    "attributeInUse": "The asset attribute value cannot be deleted as it is currently in use.",
    "AssetTypeNotFound": "The asset type was not found.",
    "AssetAttributeValueNotFound": "The asset attribute value was not found.",
    "CustomAttributeNotFound": "The custom attribute was not found.",
    "EmployeeAssetNotFound": "The employee asset was not found.",
    "AssetNotFound": "The asset was not found."
  },
  "attendance": {
    "createGeneralSettingsSuccess": "General settings were created successfully for company {companyId}.",
    "createGeneralSettingsFailure": "Failed to create general settings.",
    "getGeneralSettingsSuccess": "General settings were retrieved successfully for company {companyId}.",
    "getGeneralSettingsFailure": "General settings were not found.",
    "updateGeneralSettingsSuccess": "The general settings {recordId} were updated successfully.",
    "updateGeneralSettingsFailure": "Failed to update general settings.",
    "createRegularizationReasonSuccess": "The regularization reason was created successfully for company {companyId}.",
    "createRegularizationReasonFailure": "Failed to create the regularization reason.",
    "getRegularizationReasonSuccess": "The regularization reason {recordId} was retrieved successfully.",
    "getRegularizationReasonFailure": "The regularization reason was not found.",
    "updateRegularizationReasonSuccess": "The regularization reason {recordId} was updated successfully.",
    "updateRegularizationReasonFailure": "Failed to update the regularization reason.",
    "deleteRegularizationReasonSuccess": "The regularization reason {recordId} was deleted successfully.",
    "deleteRegularizationReasonFailure": "The regularization reason was not found.",
    "getAllRegularizationReasonsSuccess": "All regularization reasons were retrieved successfully for company {companyId}.",
    "createAttendanceModeSuccess": "The attendance mode was created successfully for company {companyId}.",
    "createAttendanceModeFailure": "Failed to create the attendance mode.",
    "getAttendanceModeSuccess": "The attendance mode {recordId} was retrieved successfully.",
    "getAttendanceModeFailure": "The attendance mode was not found.",
    "updateAttendanceModeSuccess": "The attendance mode {recordId} was updated successfully.",
    "updateAttendanceModeFailure": "Failed to update the attendance mode.",
    "deleteAttendanceModeSuccess": "The attendance mode {recordId} was deleted successfully.",
    "deleteAttendanceModeFailure": "The attendance mode was not found.",
    "getAllAttendanceModesSuccess": "All attendance modes were retrieved successfully.",
    "createAttendanceTemplateSuccess": "The attendance template was created successfully for company {companyId}.",
    "attendanceTemplateNotFound": "The attendance template was not found.",
    "invalidAttendanceTemplate": "The attendance template is invalid.",
    "createAttendanceRegularizationSuccess": "The attendance regularization was created successfully for company {companyId}.",
    "attendanceRegularizationExists": "An attendance regularization with this template already exists.",
    "lopAlreadyProcessed": "Loss of pay (LOP) has already been processed for user {userId}.",
    "attendanceProcessExists": "An attendance process for this period already exists.",
    "attendanceProcessNotFound": "The attendance process for this period was not found.",
    "cannotDeleteAttendanceProcess": "The attendance process cannot be deleted as it has been exported to payroll.",
    "getRosterShiftAssignmentSuccess": "The roster shift assignment was retrieved successfully for ID {recordId}.",
    "getRosterShiftAssignmentFailure": "The roster shift assignment was not found.",
    "getRosterShiftAssignmentByUserSuccess": "The roster shift assignment was retrieved successfully for user {userId}.",
    "getRosterShiftAssignmentByUserFailure": "The roster shift assignment was not found for the user.",
    "createEmployeeDutyRequestSuccess": "The employee duty request was created successfully for company {companyId}.",
    "createEmployeeDutyRequestFailure": "Failed to create the employee duty request.",
    "userOnDutyTemplateNotFound": "No on-duty template is assigned to the current user.",
    "employeeOnDutyRequestExists": "An on-duty request is already assigned to the current user.",
    "updateEmployeeDutyRequestSuccess": "The employee duty request {recordId} was updated successfully.",
    "updateEmployeeDutyRequestFailure": "The employee duty request was not found.",
    "deleteEmployeeDutyRequestSuccess": "The employee duty request {recordId} was deleted successfully.",
    "deleteEmployeeDutyRequestFailure": "The employee duty request was not found.",
    "getAllEmployeeDutyRequestsSuccess": "All employee duty requests were retrieved successfully for company {companyId}.",
    "getAllEmployeeDutyRequestsFailure": "Failed to retrieve employee duty requests.",
    "mappedTimlogToAttendanceSuccess": "Time logs were mapped to attendance successfully for company {companyId}.",
    "mappedTimlogToAttendanceFailure": "Failed to map time logs to attendance.",
    "uploadAttendanceJSONSuccess": "Attendance records were processed successfully.",
    "uploadAttendanceJSONFailure": "Failed to process attendance records.",
    "empCodeNotValid": "Emp Code Not Valid",
    "shiftNotAssigned": "Shift Not Assigned",
    "uploadAttendanceJSONNoData": "No Records uploaded , Please validate your Emp Code and other Details.", 
    "invalidAttendanceJSONFormat": "Invalid format: Data must be an array of objects.",
    "processAttendanceAndLOPSuccess": "Attendance and loss of pay (LOP) were processed successfully for user {userId}.",
    "processAttendanceAndLOPFailure": "Failed to process attendance and loss of pay (LOP).",
    "lopAlreadyProcessedForUser": "Loss of pay (LOP) has already been processed for user {userId}.",
    "processAttendanceUpdateSuccess": "Attendance was processed successfully for period {attendanceProcessPeriod}.",
    "processAttendanceUpdateFailure": "Failed to process attendance.",
    "processAttendanceSuccess": "Attendance was processed successfully for period {attendanceProcessPeriodMonth}-{attendanceProcessPeriodYear}.",
    "processAttendanceFailure": "Failed to process attendance.",
    "deleteAttendanceSuccess": "The attendance process was deleted successfully for period {attendanceProcessPeriodMonth}-{attendanceProcessPeriodYear}.",
    "deleteAttendanceFailure": "Failed to delete the attendance process.",
    "getOvertimeByUserSuccess": "Overtime records were retrieved successfully for user {userId}.",
    "getOvertimeByUserFailure": "Overtime records were not found for the user.",
    "AttendanceRegularizationNF": "Attendance regularization was not found.",
    "UserOnDutyTemplateNF": "The user on-duty template was not found.",
    "ShiftTemplateAssignmentNF": "The shift template assignment was not found.",
    "TimeEntryNF": "The time entry was not found.",
    "UserIDMonthYearRequired": "User ID, month, and year are required.",
    "OvertimeRecordsNF": "Overtime records were not found.",
    "createOnDutyRequestsNotificationTitle": "On-Duty Request Created",
    "createOnDutyRequestsNotificationMessage": "On-Duty Request has been created.",
    "updateOnDutyRequestsNotificationTitle": "On-Duty Request Updated",
    "updateOnDutyRequestsNotificationMessage": "On-Duty Request has been updated."
  },
  "auth": {
    "signupSuccess": "The user signed up successfully for company {companyId}.",
    "signupFailure": "Failed to sign up the user.",
    "webSignupSuccess": "The user and company were signed up successfully.",
    "webSignupFailure": "Failed to sign up the user and company.",
    "createUserSuccess": "The user was created successfully for company {companyId}.",
    "createUserFailure": "Failed to create the user.",
    "userLimitExceeded": "You have exceeded the user limit for your subscription plan. You cannot add more than {maxUsers} users. Please upgrade your plan.",
    "loginSuccess": "The user logged in successfully.",
    "loginFailure": "Failed to log in.",
    "emailOrPasswordMissing": "Email or password was not provided.",
    "incorrectEmailOrPassword": "The email or password is incorrect.",
    "notLoggedIn": "You are not logged in. Please log in to access this resource.",
    "userNotFound": "The user associated with this token no longer exists.",
    "passwordChanged": "The user recently changed their password. Please log in again.",
    "subscriptionInactive": "Your subscription is inactive. Please contact your administrator.",
    "forgotPasswordSuccess": "A password reset email was sent successfully.",
    "forgotPasswordNoUser": "No account was found with this email address.",
    "emailSendFailure": "An error occurred while sending the email. Please try again later.",
    "resetPasswordSuccess": "The password was reset successfully.",
    "invalidOrExpiredToken": "The token is invalid or has expired.",
    "sendLogSuccess": "Log emails were sent successfully.",
    "sendLogFailure": "Failed to send log emails.",
    "updatePasswordSuccess": "The password was updated successfully for user {userId}.",
    "updatePasswordFailure": "Failed to update the password.",
    "incorrectCurrentPassword": "The current password provided is incorrect.",
    "updateUserByInvitationSuccess": "The user was updated successfully via invitation.",
    "updateUserByInvitationFailure": "Failed to update the user via invitation.",
    "addRoleSuccess": "The role {roleName} was added successfully for company {companyId}.",
    "addRoleFailure": "Failed to add the role.",
    "deleteRoleSuccess": "The role was deleted successfully.",
    "deleteRoleFailure": "Failed to delete the role.",
    "roleInUse": "The role is currently in use. Please delete related records before deleting the role.",
    "roleNotFound": "No role was found.",
    "getRoleSuccess": "The role was retrieved successfully.",
    "getRolesSuccess": "Roles were retrieved successfully for company {companyId}.",
    "addSubordinateSuccess": "The subordinate was added successfully for user {userId}.",
    "addSubordinateFailure": "Failed to add the subordinate.",
    "subordinateExists": "The user subordinate already exists.",
    "getSubordinatesSuccess": "Subordinates were retrieved successfully for user {userId}.",
    "getSubordinatesFailure": "Failed to retrieve subordinates.",
    "deleteSubordinatesSuccess": "The subordinate was deleted successfully.",
    "deleteSubordinatesFailure": "Failed to delete the subordinate.",
    "getRolePermissionSuccess": "The role permission was retrieved successfully.",
    "getRolePermissionFailure": "No role permission was found.",
    "getAllRolePermissionsSuccess": "All role permissions were retrieved successfully.",
    "getAllRolePermissionsFailure": "Failed to retrieve role permissions.",
    "createRolePermissionSuccess": "The role permission was created successfully for company {companyId}.",
    "createRolePermissionFailure": "Failed to create the role permission.",
    "rolePermissionExists": "The role permission already exists.",
    "updateRolePermissionSuccess": "The role permission was updated successfully.",
    "updateRolePermissionFailure": "Failed to update the role permission.",
    "deleteRolePermissionSuccess": "The role permission was deleted successfully.",
    "deleteRolePermissionFailure": "No role permission was found with the specified ID.",
    "emailOrPasswordNotSpecified": "Email or password was not specified.",
    "emailSendError": "An error occurred while sending the email. Please try again later.",
    "noAccountFound": "No account was found with this email address.",
    "tokenInvalidOrExpired": "The token is invalid or has expired.",
    "currentPasswordWrong": "The current password provided is incorrect.",
    "noDocumentFound": "No document was found with the specified ID.",
    "noRoleFound": "No role was found.",
    "userSubordinateExists": "The user subordinate already exists.",
    "noRolePermissionFound": "No role permission was found.",
    "userLimitReached": "You have reached the user limit for your subscription plan. You cannot add more than {userLimit} users. Please upgrade your plan to add more users."
  },
  "company": {
    "notFound": "No document was found with the specified ID.",
    "companyIdMissing": "Company information is missing from cookies.",
    "serverError": "A server error occurred.",
    "holidayNotFound": "The holiday calendar was not found.",
    "zoneNotFound": "The zone was not found.",
    "locationNotFound": "The location was not found.",
    "departmentNotFound": "The department was not found.",
    "subDepartmentNotFound": "The sub-department was not found.",
    "designationNotFound": "The designation was not found.",
    "bandNotFound": "The band was not found.",
    "signatoryNotFound": "The signatory was not found.",
    "taxSlabNotFound": "The tax slab was not found."
  },
  "dashboardController": {
    "userIdAndDateRequired": "User ID and date are required.",
    "invalidDateFormat": "The date format is invalid."
  },
  "documents": {
    "companyPolicyDocumentNotFound": "The company policy document was not found.",
    "companyPolicyDocumentInUse": "The company policy document is currently in use. Please delete related records before deleting it.",
    "entryNotFound": "No entry was found with the specified ID.",
    "documentNotFound": "No document was found with the specified ID.",
    "documentInUse": "The document cannot be deleted as it is currently in use.",
    "documentAppliedToNotFound": "No DocumentAppliedTo was found with the specified ID.",
    "documentCategoryNotFound": "The document category was not found.",
    "documentCategoryInUse": "The document category cannot be deleted as it is currently in use.",
    "documentUsersNotFound": "DocumentUsers were not found.",
    "templateNotFound": "No template was found with the specified ID.",
    "userDocumentNotFound": "No document was found with the specified ID."
  },
  "error": {
    "invalidField": "Invalid {path}: {value}.",
    "duplicateField": "Duplicate field value: {value}. Please use a different value.",
    "invalidInputData": "Invalid input data: {errors}.",
    "invalidToken": "The token is invalid. Please log in again.",
    "tokenExpired": "Your token has expired. Please log in again.",
    "genericError": "Something went wrong.",
    "noDocumentFound": "No document was found with the specified ID."
  },
  "eventNotification": {
    "eventNotificationNotFound": "The event notification was not found.",
    "eventNotificationTypeNotFound": "The event notification type was not found.",
    "userNotificationNotFound": "The user notification was not found.",
    "noCompanyId": "No company ID was found in cookies.",
    "invalidCompanyId": "The company ID format is invalid.",
    "requiredFieldsMissing": "The fields user, notification, and action are required.",
    "notificationAlreadyAssigned": "The notification is already assigned to this user.",
    "notificationNotFoundForUser": "The notification was not found for this user.",
    "notificationUnassigned": "The notification was successfully unassigned.",
    "invalidAction": "The action provided is invalid.",
    "userAndCompanyIdRequired": "User ID and company ID are required.",
    "userIdRequired": "User ID is required.",
    "userAndNotificationIdRequired": "User ID and notification ID are required.",
    "userNotificationLinkNotFound": "The user notification link was not found."
  },
  "expense": {
    "companyInfoMissing": "Company information is missing from cookies. Please ensure you are logged in correctly.",
    "labelInUse": "This label is already in use for another category. Please choose a different label.",
    "internalServerError": "An unexpected error occurred on the server. Please try again later.",
    "categoryInUse": "This expense category is currently in use. Please delete related records before deleting the category.",
    "categoryNotFound": "The expense category was not found.",
    "companyIdNotFound": "The company ID was not found in cookies. Please ensure you are logged in correctly.",
    "invalidRequestData": "The request data provided is invalid. Please check your input and try again.",
    "applicationFieldNotFound": "The expense application field with ID {{id}} was not found.",
    "applicationFieldUpdated": "The expense application field(s) were successfully updated or created.",
    "fieldValueNotFound": "The expense application field value with ID {{id}} was not found.",
    "policyLabelRequired": "A policy label is required to create an expense template.",
    "policyLabelExists": "This policy label already exists. Please use a unique label.",
    "categoryNotInRequest": "Expense category details are missing from the request.",
    "invalidCategory": "One or more provided categories are invalid.",
    "templateNotFound": "The expense template was not found.",
    "templateInUse": "This expense template is currently in use. Please delete related records before deleting the template.",
    "employeeAssignmentNotFound": "The employee expense assignment was not found.",
    "expensesNeedClosure": "Pending expenses must be closed before this action can be completed.",
    "reportCreated": "The expense report was created successfully.",
    "reportNotFound": "The expense report was not found.",
    "reportInUse": "This expense report is currently in use. Please delete related records before deleting the report.",
    "attachmentPropertiesMissing": "All attachment properties (type, name, size, extension, file) must be provided.",
    "reportExpenseNotFound": "The expense report expense was not found.",
    "advanceNotFound": "The expense advance was not found for the specified user.",
    "advanceCategoryNotInRequest": "Advance category details are missing from the request.",
    "advanceTemplateNotFound": "The advance template was not found.",
    "userNotFound": "The user was not found."
  },
  "feedback": {
    "feedbackFieldNotFound": "The feedback field was not found.",
    "noFeedbackFieldsForCompany": "No feedback fields were found for this company.",
    "feedbackNotFound": "The feedback was not found.",
    "noFeedbackForStore": "No feedback was found for this store.",
    "noFeedbackForCompany": "No feedback was found for this company.",
    "invalidFeedbackFieldId": "The feedback field ID {{fieldId}} is invalid.",
    "requiredFieldMissing": "A value for the required field '{{fieldName}}' is missing.",
    "barcodeNotFound": "The barcode was not found.",
    "noBarcodesForCompany": "No barcodes were found for this company.",
    "barcodeRequiredFieldsMissing": "The fields storeId, tableId, and url are required."
  },
  "genericSetting": {
    "settingNotFound": "The generic setting was not found.",
    "settingValueNotFound": "The generic setting value was not found.",
    "settingListDataNotFound": "The generic setting list data was not found.",
    "noSettingsForUser": "No generic settings were found for this user and company."
  },
  "handlerFactory": {
    "documentNotFound": "No document was found with the specified ID."
  },
  "interviewProcess": {
    "applicationStatusExists": "The application status already exists for this company.",
    "applicationStatusNotFound": "The application status was not found.",
    "candidateNotFound": "The candidate was not found.",
    "candidateApplicationStatusNotFound": "The candidate application status was not found.",
    "candidateDataFieldNotFound": "The candidate data field was not found.",
    "noCandidateDataFieldsForCompany": "No candidate data fields were found for the company.",
    "candidateDataFieldValueNotFound": "The candidate data field value was not found.",
    "noCandidateDataFieldValuesForCompany": "No candidate data field values were found for the company.",
    "candidateInterviewDetailsNotFound": "The candidate interview details were not found.",
    "noCandidateInterviewDetailsForCompany": "No candidate interview details were found for the company.",
    "feedbackFieldNotFound": "The feedback field was not found.",
    "noFeedbackFieldsForCompany": "No feedback fields were found for the company.",
    "feedbackFieldValueNotFound": "The feedback field value was not found.",
    "noFeedbackFieldValuesForCompany": "No feedback field values were found for the company.",
    "interviewerNotFound": "The interviewer was not found.",
    "'RecordUpdatedSuccessfully'": "The record was updated successfully.",
    "'RecordCreatedSuccessfully'": "The record was created successfully."
  },
  "leave": {
    "companyInfoMissing": "Company information is missing from cookies.",
    "generalSettingNotFound": "The general setting was not found.",
    "leaveCategoryNotFound": "The leave category was not found.",
    "systemGeneratedLeaveCategory": "This leave category is system-generated and cannot be deleted.",
    "leaveCategoryInTemplate": "This leave category is added to a leave template and cannot be deleted.",
    "employeeLeaveAssignmentNotFound": "The employee leave assignment was not found.",
    "leaveNeedClosure": "Leaves must be closed before deleting the assignment.",
    "labelRequired": "A label is required.",
    "companyIdNotFound": "The company ID was not found in cookies.",
    "labelExists": "The label already exists.",
    "leaveCategoriesRequired": "Leave categories are required.",
    "leaveTemplateNotFound": "The leave template was not found.",
    "leaveTemplateLabelExists": "The leave template label already exists.",
    "leaveCategoryNotInRequest": "The leave category is missing from the request.",
    "invalidCategory": "The category provided is invalid.",
    "internalServerError": "An internal server error occurred.",
    "invalidRequestData": "The request data provided is invalid.",
    "usersRequired": "Users are required.",
    "leaveAlreadyGranted": "A leave has already been granted for the same user on the same date.",
    "employeeLeaveGrantNotFound": "The employee leave grant was not found.",
    "invalidUser": "The user provided is invalid.",
    "leaveGrantDateExists": "A leave grant for the same user and date already exists.",
    "leaveApplicationNotFound": "The employee leave application was not found.",
    "leaveAssignmentNotExist": "The leave assignment does not exist. You cannot apply for a leave.",
    "insufficientLeaveBalance": "There is insufficient leave balance to apply for this leave.",
    "shortLeaveNotFound": "The short leave was not found.",
    "AttachmentPropertiesMustBeProvided": "All attachment properties must be provided.",
    "InvaliddateFormat": "The date format is invalid. Please provide valid dates.",
    "InvalidEndDate": "The end date must be after the start date.",
    "ErrorCreatingLeaveTemplateCategory": "An error occurred while creating the leave template category.",
    "addLeaveRequestNotificationTitle": "Leave Request Created",
    "addLeaveRequestNotificationMessage": "A leave request has been created.",
    "leaveApprovalNotificationTitle": "Leave Request Approved",
    "leaveApprovalNotificationMessage": "A leave request has been approved.",
    "leaveRejectNotificationTitle": "Leave Request Rejected",
    "leaveRejectNotificationMessage": "A leave request has been rejected."
  },
  "liveTracking": {
    "userAlreadyAdded": "The user is already added for live tracking.",
    "noLiveTrackingDataFound": "No live tracking data was found.",
    "userNotFoundInLiveTracking": "The user was not found in live tracking.",
    "invalidUserData": "The user data provided is invalid."
  },
  "manualTime": {
    "userNotFound": "No user was found with the provided email or ID.",
    "dateRequired": "A date is required.",
    "fromDateRequired": "A from date is required.",
    "toDateRequired": "A to date is required.",
    "managerNotFound": "No manager was found with the provided ID.",
    "taskNotFound": "No task was found with the provided ID.",
    "projectRequired": "A project is required.",
    "invalidDateRange": "The from date must be earlier than the to date.",
    "timeEntryOverlap": "The time entry overlaps with an existing record. Please adjust the time.",
    "manualTimeRequestNotFound": "No manual time request was found with the specified ID.",
    "addManualTimenotificationTitle": "Created Manual Time Request",
    "addManualTimenotificationMessage": "{{userName}} has requested you to approve a manual time request.",
    "updateManualTimenotificationTitle":"Manual time request approved",
    "updateManualTimenotificationMessage": "Your manual time request has been approved."
  },
  "payroll": {
    "companyIdNotFound": "The company ID was not found in cookies.",
    "generalSettingNotFound": "The general setting was not found.",
    "invalidGeneralSetting": "The general setting provided is invalid.",
    "roundingRuleNotFound": "The rounding rule was not found.",
    "pfTemplateNotFound": "The PF template was not found.",
    "fixedAllowancesNotFound": "Fixed allowances were not found.",
    "deletionNotAllowed":"Deletion Not Allow",
    "fixedContributionSlabNotFound": "The fixed contribution slab was not found.",
    "lwfFixedContributionMonthNotFound": "The LWF fixed contribution month was not found.",
    "ptConfigureStateNotFound": "The PT configure state was not found.",
    "ptSlabNotFound": "The PT slab was not found.",
    "ptDeductionMonthNotFound": "The PT deduction month was not found.",
    "ceilingAmountNotFound": "The ceiling amount was not found.",
    "esicContributionNotFound": "The ESIC contribution was not found.",
    "variableAllowanceNotFound": "The variable allowance was not found.",
    "fixedDeductionNotFound": "The fixed deduction was not found.",
    "variableDeductionNotFound": "The variable deduction was not found.",
    "loanAdvancesCategoryExists": "The loan advances category already exists.",
    "loanAdvancesCategoryNotFound": "The loan advances category was not found.",
    "noLoanAdvancesCategoriesFound": "No loan advances categories were found for the specified company.",
    "flexiBenefitsCategoryExists": "The flexi benefits category already exists for this company.",
    "flexiBenefitsCategoryNotFound": "The flexi benefits category was not found.",
    "ctcTemplateNotFound": "The CTC template was not found.",
    "nameRequired": "A name is required.",
    "ctcTemplateFixedAllowanceNotExists": "The CTC template fixed allowance is missing from the request.",
    "invalidFixedAllowances": "The fixed allowances provided are invalid.",
    "invalidFixedDeduction": "The fixed deduction provided is invalid.",
    "invalidVariableAllowance": "The variable allowance provided is invalid.",
    "invalidVariableDeduction": "The variable deduction provided is invalid.",
    "invalidFixedContribution": "The fixed contribution provided is invalid.",
    "invalidEmployeeDeduction": "The employee deduction provided is invalid.",
    "payrollNotFound": "The payroll was not found.",
    "payrollUserNotFound": "The payroll user was not found.",
    "invalidPayrollUser": "The payroll user provided is invalid.",
    "payrollAttendanceSummaryNotFound": "The payroll attendance summary was not found.",
    "payrollVariablePayNotFound": "The payroll variable pay deduction was not found.",
    "payrollManualArrearsNotFound": "The payroll manual arrears were not found.",
    "payrollLoanAdvanceNotFound": "The payroll loan/advance was not found.",
    "payrollIncomeTaxNotFound": "The payroll income tax record was not found.",
    "flexiBenefitsAndPFTaxNotFound": "The flexi benefits and PF tax record was not found.",
    "payrollOvertimeNotFound": "The payroll overtime record was not found.",
    "payrollStatutoryNotFound": "The payroll statutory record was not found.",
    "payrollFNFUsersNotFound": "The payroll FNF users were not found.",
    "payrollFNFAttendanceSummaryNotFound": "The payroll FNF attendance summary was not found.",
    "payrollFNFVariablePayNotFound": "The payroll FNF variable pay deduction was not found.",
    "payrollFNFManualArrearsNotFound": "The payroll FNF manual arrears were not found.",
    "payrollFNFTerminationCompensationNotFound": "The payroll FNF termination compensation was not found.",
    "payrollFNFLoanAdvanceNotFound": "The payroll FNF loan advance was not found.",
    "payrollFNFStatutoryBenefitsNotFound": "The payroll FNF statutory benefits were not found.",
    "payrollFNFFlexiBenefitsAndPFTaxNotFound": "The payroll FNF flexi benefits and PF tax record was not found.",
    "payrollFNFIncomeTaxNotFound": "The payroll FNF income tax record was not found.",
    "payrollFNFOvertimeNotFound": "The payroll FNF overtime record was not found.",
    "LWFFixedContributionMonthsUpdatedSuccessfully": "The LWF fixed contribution months were updated successfully.",
    "LWFFixedContributionMonthNotFound": "The LWF fixed contribution month was not found.",
    "RecordNotFound": "The record was not found.",
    "'RecordSuccessfullyDeleted'": "The record was successfully deleted.",
    "OvertimeRecordSuccessfullyDeleted": "The payroll overtime record was successfully deleted.",
    "statusEditRestriction": "Loan advance can only be edited when the status is 'Requested'.",
    "invalidLoanAdvanceId": "Invalid loan or advance selected.",
    "noRemainingInstallments": "No remaining installments left for this loan or advance.",
    "invalidFNFUser": "The FNF payroll user provided is invalid.",
    "duplicateDisbursementEntry": "A disbursement entry already exists for this user and loan. Duplicate disbursement is not allowed.",
    "statutoryNameMissing": "The statutory name is missing.",
    "invalidPayrollStatus": "Invalid Payroll Status",
    "invalidPayrollFNFStatus": "Invalid Payroll FNF Status",
    "invalidPayrollUserStatus":"Invalid Payroll User Status",
    "invalidPayrollFNFUserStatus":"Invalid Payroll FNF User Status"
  },
  "pricing": {
    "employeeAssignmentNotFound": "The employee advance assignment was not found.",
    "expensesNeedClosure": "Expenses must be closed before deleting the assignment.",
    "categoryNotFound": "The expense category was not found.",
    "optioninclusionNotFound": "The option inclusion details were not found.",
    "offerinclusionNotFound": "The offer inclusion details were not found.",
    "includeDetailsNotFound": "The include details were not found.",
    "prerequisitesNotFound": "The prerequisites details were not found.",
    "companyPlanNotFound": "The company plan details were not found.",
    "planOfferNotFound": "The plan offer details were not found.",
    "userGroupNotFound": "The user group details were not found.",
    "LabelAlreadyInUse": "The label is already in use for another software.",
    "'LabelAlreadyInUseForAnotherOption'": "The label is already in use for another option.",
    "LabelAlreadyInUseForAnotherPlan": "The label is already in use for another plan.",
    "NameAlreadyInUseForSameSoftware": "The name is already in use for the same software.",
    "InvalidPlan": "The plan or option ID is invalid.",
    "OptionSuccessfullyRemoved": "The option was successfully removed from the plan.",
    "OfferSuccessfullyRemoved": "The offer was successfully removed from the plan.",
    "'InvalidPlanOrOfferID'": "The plan or offer ID is invalid.",
    "IncludeDetailsNotFound": "The include details were not found.",
    "PlanSuccessfullyRemovedFromTheOffer": "The plan was successfully removed from the offer.",
    "NameAlreadyInUseForAnotherUserGroup": "The name is already in use for another user group.",
    "userGroupTypeNotFound": "The user group type was not found.",
    "userGroupTypeRemoved": "The user group type was successfully removed.",
    "nameAlreadyInUse": "The name is already in use for another user group.",
    "prerequisitesExist": "Prerequisites already exist for the specified plan and offer.",
    "invalidPlanOrOfferId": "The plan or offer ID is invalid.",
    "prerequisitesRemoved": "The prerequisites were successfully removed.",
    "companyPlanExists": "A company plan already exists for the specified plan and company.",
    "companyPlanRemoved": "The company plan was successfully removed.",
    "planRemovedFromOffer": "The plan was successfully removed from the offer.",
    "invalidCurrentPlanId": "The currentPlanId is invalid.",
    "subscriptionNotFound": "The subscription was not found.",
    "invalidSubscriptionId": "The subscription ID is invalid.",
    "planNotFound": "The plan was not found.",
    "pleaseProvideFields": "Please provide the fields to update.",
    "selectDifferentPlan": "Please select a different plan.",
    "unableToChangePlan": "Unable to change the plan.",
    "planHistoryNotFound": "The plan history was not found.",
    "invalidPlanHistoryId": "The plan history ID is invalid.",
    "invoiceNotFound": "The invoice was not found.",
    "invalidInvoiceId": "The invoice ID is invalid.",
    "userGroupDetailsNotFound": "The user group details were not found.",
    "invalidUserGroupTypeId": "The user group type ID is invalid.",
    "invalidUserIds": "The user IDs provided are invalid: ",
    "usersAddedToGroup": "Users were successfully added to the user group.",
    "usersUpdatedInGroup": "Users in the user group type were successfully updated.",
    "usersRetrieved": "Users were retrieved successfully.",
    "InvalidRequestPayload": "The user group type was successfully created.",
    "InvalidSignature": "The signature is invalid."
  },
  "productivity": {
    "modelCreated": "The productivity model was created successfully.",
    "modelNotFound": "The productivity model was not found.",
    "creationFailed": "Failed to create the productivity model.",
    "updateFailed": "Failed to update the productivity model.",
    "deletionFailed": "Failed to delete the productivity model.",
    "modelDeleted": "The productivity model was deleted successfully."
  },
  "projectController": {
    "projectNotFound": "No project was found with the specified ID.",
    "projectUserNotFound": "No project user was found with the specified ID.",
    "projectInUse": "The project is currently in use. Please delete related records before deleting the project.",
    "projectUserExists": "The project user already exists.",
    "noDocumentFound": "No document was found with the specified ID."
  },
  "recruitment": {
    "skillNotFound": "No skill was found with the specified ID.",
    "roleNotFound": "No role was found with the specified ID.",
    "industryNotFound": "No industry was found with the specified ID.",
    "creationFailed": "Failed to create the resource."
  },
  "report": {
    "internalServerError": "An internal server error occurred."
  },
  "separation": {
    "resignationNotFound": "The resignation was not found.",
    "invalidTerminationId": "Invalid termination ID.",
    "terminationNotFound": "The termination record was not found.",
    "appealNotFound": "The termination appeal was not found.",
    "appealAlreadySubmitted": "A termination appeal has already been submitted.",
    "companyIdNotFound": "The company ID was not found in cookies. Please ensure you are logged in correctly.",  
    "resignationMustBePending": "The resignation status must be pending to allow updates.",
    "invalidResignationStatus": "The resignation status provided is invalid. Valid statuses are: Pending, Completed, Appealed, Deleted.",
    "userNotFound": "The user was not found.",
    "terminationNotFoundOrNotPending": "The termination was not found or is not in a pending status.",
    "terminationRecordNotFound": "The termination record was not found.",
    "terminationRecordNotInPendingStatus": "The termination record was not found or Not in Pending List",   
    "invalidTerminationStatus": "The termination status provided is invalid. Valid statuses are: Pending, Completed, Appealed.",
    "appealReviewSuccess": "The appeal has been reviewed and updated successfully.",
    "invalidAppealStatus": "The provided appeal status is invalid. Allowed values are: Approved or Rejected.",
    "separationTypeNotFound": "The separation type was not found.",  
    "existingResignation": "User already has an active resignation.",
    "exitInterviewQuestionNotFound": "The exit interview question was not found.",
    "exitInterviewOptionsNotFound": "The exit interview question options were not found.",
    "exitInterviewAnswerNotFound": "The exit interview question answer was not found.",
    "separationTemplateSettingNotFound": "The separation template setting was not found.",
    "initiateSeparationRequestNotFound": "The initiate separation request was not found.",
    "separationRequestNotFound": "The separation request was not found.",
    "separationTypeInUse": "The separation type is currently in use. Please delete related records before deleting the separation type.",
    "ExitInterviewQuestionAlreadyInUse": "The exit interview question is currently in use. Please delete related records before deleting the exit interview question."
  },
  "settings": {
    "productivityNotFound": "No productivity was found with the specified ID.",
    "invalidInputData": "The input data provided is invalid.",
    "companyIdRequired": "The company ID is required.",
    "userLocationNotFound": "The user location was not found.",
    "internalServerError": "An internal server error occurred.",
    "NoChangesMade": "No changes were made.",
    "LocationAddedSuccessfully": "The location was added successfully.",
    "LocationUpdatedSuccessfully": "The location was updated successfully.",
    "LocationDeletedSuccessfully": "The location was deleted successfully."
  },
  "task": {
    "timeLogExists": "A time log is already added for the task. The task cannot be deleted.",
    "documentNotFound": "No document was found with the specified ID.",
    "invalidProject": "The project provided is invalid.",
    "taskNotFound": "The task was not found.",
    "invalidUserOrTask": "The user or task provided is invalid.",
    "taskAlreadyExists": "A task with this name already exists.",
    "taskUserAlreadyExists": "The task user already exists.",
    "failedToFetchTaskList": "Failed to fetch the task list.",
    "invalidAttachmentProperties": "All attachment properties must be provided.",
    "sameUserAlreadyAssigned": "The same user is already assigned.",
    "invalidTaskOrTag": "The task or tag provided is invalid.",
    "tagAlreadyExists": "The tag already exists.",
    "tagInUse": "The tag is already added to the task and cannot be deleted.",
    "serverError": "A server error occurred."
  },
  "timeLog": {
    "deviceMismatch": "The user is logged in on another device. Would you like to make this device active?",
    "userIdRequired": "The user ID is required.",
    "coordinatesRequired": "Latitude and longitude are required.",
    "checkInTimeRequired": "The check-in time is required.",
    "checkOutTimeRequired": "The check-out time is required.",
    "projectTaskRequired": "A project and task are required.",
    "noOpenCheckIn": "No open check-in record was found.",
    "serverError": "An internal server error occurred.",
    "CheckedInSuccessfully": "Checked in successfully.",
    "timeLogNotificationTitle": "Time log deleted",
    "timeLogNotificationMessage": "Time log deleted."
  },
  "user": {
    "noDocumentFound": "No document was found with the specified ID.",
    "noUserFound": "No user was found with the specified ID.",
    "companyIdRequired": "The company ID was not found in cookies.",
    "passwordUpdateNotAllowed": "You cannot update the password using this route. Please use /updateMyPassword.",
    "noAppointmentFound": "No appointment was found with the specified ID.",
    "invalidStatus": "The status value provided is invalid.",
    "noUsersForEmpCode": "No users were found with the provided employee code and company ID.",
    "invalidObjectId": "The ObjectId {{id}} is invalid.",
    "noEmploymentFound": "The user employment record was not found.",
    "noSalaryDetailsFound": "The employee salary details were not found.",
    "noSettingsFound": "The employee settings were not found.",
    "noSalutatoryDetailsFound": "The employee salutatory details were not found.",
    "noLoanAdvanceFound": "The employee loan advance was not found.",
    "emailError": "An error occurred while sending the email. Please try again later.",
    "invalidComponent": "{{id}} is not a valid {{type}}.",
    "missingAttachmentProperties": "All attachment properties must be provided.",
    "noDeclarationsFound": "No declarations were found for this company.",
    "noTaxDeclarationFound": "The employee income tax declaration was not found.",
    "invalidOtp": "The OTP is invalid or has expired.",
    "otpNotFound": "The OTP was not found.",
    "noUser": "The user was not found.",
    "missingProfileImageProperties": "All profile image properties must be provided.",
    "ErrorCancellingOTP": "An error occurred while cancelling the OTP.",
    "OTPCancelledSuccessfully.": "The OTP was cancelled successfully.",
    "ErrorVerifyingOTP": "An error occurred while verifying the OTP.",
    "otpVerifiedSuccessfully": "The OTP was verified successfully.",
    "userNotFound": "User not found in the system.",
    "noPayrollOrAttendanceRecord": "No payroll or attendance record found for this user.",
    "terminationDateNotFound": "Termination date not found for user.",
    "lastWorkingDateNotFound": "Last working date not found for user.",
    "fnfDateRangeCalculated": "FNF date range calculated successfully.",
    "errorRetrievingData": "Error retrieving data, please try again later.",
    "missingUserId": "User ID missing in the request.",
    "loanAdvanceRequestTitle": "Loan/advance Request created",
    "loanAdvanceRequestMessage": "A loan/advance request has been created for {{amount}}, with a monthly installment of {{monthlyInstallment}} over {{noOfInstallment}} installments."
  },
  "userPreferences": {
    "getAllSuccess": "Data fetched successfully.",
    "categoryNotFound": "The preference category was not found.",
    "optionNotFound": "The preference option was not found.",
    "preferenceExists": "The specified preference already exists.",
    "preferenceNotFound": "The user preference was not found.",
    "isscreenshotsounddisabled": "Screenshot Sound Disable",
    "isscreenshotnotificationdisabled": "Screenshot Notification Disable",
    "isscreenshotblur": "Screenshot Blur",
    "weeklyhourslimit": "Weekly hours limit(hours)",
    "monthlyhourslimit": "Monthly hours limit(hours)"
  },
  "zoom": {
    "meetingCreationFailed": "Unable to generate the meeting link.",
    "internalServerError": "An internal server error occurred.",
    "accessTokenFailed": "Failed to obtain the access token."
  },
  "openAI": {
    "ParametersAreRequired": "The model and prompt parameters are required.",
    "invalidModel": "The specified model is invalid."
  }
}