{
  "common": {
    "success": "Operation completed successfully",
    "failure": "Operation failed",    
    "missingParams": "Missing required parameters",
    "internalError": "Internal Server Error",
    "noRecords": "No records found",
    "notFound": "No document found with that ID",
    "taskStatusNotFound": "No Task Status found",
    "taskPriorityNotFound": "No Task Status found",
    "permissionNotFound": "No permission found",
    "emailTemplateNotFound": "Email template not found",
    "systemTemplateDeleteNotAllowed": "System Defined template, User can't delete",
    "serverError": "Server error",
    "companyIdMissing": "Company ID not found in cookies",
    "incomeTaxSectionsNotFound": "IncomeTaxSections not found for the given company",
    "incomeTaxSectionNotFound": "IncomeTaxSection not found",
    "incomeTaxComponantNotFound": "Income Tax Componant not found",
    "userStateNotFound": "No user state found with that key",
    "invalidLogLevels": "logLevels must be an array of strings",
    "testLogSuccess": "Test log executed successfully",
    "requiredFieldsMissing": "userId, machineId, and isOnline are required",
    "recordNotFound": "No record found with that ID"
  },
  "appWebsite": {
    "addSuccess": "App/website record added successfully for user {userId}",
    "addFailure": "Failed to add app/website record",
    "deleteSuccess": "App/website record {recordId} deleted successfully",
    "deleteFailure": "Failed to delete app/website record",
    "getByIdSuccess": "App/website record {recordId} retrieved successfully",
    "getByIdFailure": "Failed to retrieve app/website record",
    "updateSuccess": "App/website record {recordId} updated successfully",
    "updateFailure": "Failed to update app/website record",
    "getByIdAndDateSuccess": "App/website record {recordId} for date {date} retrieved successfully",
    "getByIdAndDateFailure": "Failed to retrieve app/website record for date",
    "getAllByDateSuccess": "All app/website records for date {date} retrieved successfully",
    "getAllByDateFailure": "Failed to retrieve app/website records for date",
    "getUserProductivityAppsSuccess": "Productivity apps retrieved successfully for user {userId}",
    "getUserProductivityAppsFailure": "Failed to retrieve productivity apps",
    "getProductivitiesSuccess": "All productivity records retrieved successfully",
    "getProductivitiesFailure": "Failed to retrieve productivity records",
    "getProductivityByIdSuccess": "Productivity record {recordId} retrieved successfully",
    "getProductivityByIdFailure": "Failed to retrieve productivity record",
    "addProductivitySuccess": "Productivity record added successfully",
    "addProductivityFailure": "Failed to add productivity record",
    "updateProductivitySuccess": "Productivity record {recordId} updated successfully",
    "updateProductivityFailure": "Failed to update productivity record",
    "deleteProductivitySuccess": "Productivity record {recordId} deleted successfully",
    "deleteProductivityFailure": "Failed to delete productivity record",
    "addBrowserHistorySuccess": "Browser history record added successfully",
    "addBrowserHistoryFailure": "Failed to add browser history record",
    "deleteBrowserHistorySuccess": "Browser history record {recordId} deleted successfully",
    "deleteBrowserHistoryFailure": "Failed to delete browser history record",
    "getBrowserHistorySuccess": "Browser history records retrieved successfully",
    "getBrowserHistoryFailure": "Failed to retrieve browser history records"
  },
  "assetsManagement": {
    "addAssetTypeSuccess": "Asset type '{typeName}' created successfully",
    "addAssetTypeFailure": "Failed to create asset type",
    "getAssetTypesSuccess": "Asset type {recordId} retrieved successfully",
    "updateAssetTypeSuccess": "Asset type {recordId} updated successfully",
    "updateAssetTypeFailure": "Failed to update asset type",
    "deleteAssetTypeSuccess": "Asset type {recordId} deleted successfully",
    "deleteAssetTypeBlocked": "Asset type cannot be deleted as it is associated with existing assets",
    "getAllAssetTypesSuccess": "All asset types retrieved successfully",
    "getAssetAttributeValueSuccess": "Asset attribute value {recordId} retrieved successfully",
    "updateAssetAttributeValueSuccess": "Asset attribute value {recordId} updated successfully",
    "deleteAssetAttributeValuesSuccess": "Asset attribute values for asset {assetId} deleted successfully",
    "getAllAssetAttributeValuesSuccess": "All asset attribute values retrieved successfully",
    "createAssetAttributeValueSuccess": "Asset attribute value created successfully for asset {assetId}",
    "deleteAssetAttributeValueSuccess": "Asset attribute value {recordId} deleted successfully",
    "createAssetStatusSuccess": "Asset status '{statusName}' created successfully",
    "getAssetStatusSuccess": "Asset status {recordId} retrieved successfully",
    "updateAssetStatusSuccess": "Asset status {recordId} updated successfully",
    "deleteAssetStatusSuccess": "Asset status {recordId} deleted successfully",
    "deleteAssetStatusBlocked": "Asset status cannot be deleted as it is associated with existing assets",
    "getAllAssetStatusesSuccess": "All asset statuses retrieved successfully",
    "createCustomAttributeSuccess": "Custom attribute '{attributeName}' created successfully",
    "getCustomAttributeSuccess": "Custom attribute {recordId} retrieved successfully",
    "updateCustomAttributeSuccess": "Custom attribute {recordId} updated successfully",
    "deleteCustomAttributeSuccess": "Custom attribute {recordId} deleted successfully",
    "deleteCustomAttributeBlocked": "Custom attribute cannot be deleted as it is in use",
    "deleteCustomAttributeByAssetTypeSuccess": "Custom attributes for asset type {assetTypeId} deleted successfully",
    "getAllCustomAttributesSuccess": "All custom attributes retrieved successfully",
    "addCustomAttributesSuccess": "Custom attributes added successfully for asset type {assetTypeId}",
    "getAssetCustomAttributesSuccess": "Custom attributes for asset type {assetTypeId} retrieved successfully",
    "createEmployeeAssetSuccess": "Employee asset created successfully",
    "getEmployeeAssetSuccess": "Employee assets for employee {employeeId} retrieved successfully",
    "updateEmployeeAssetSuccess": "Employee asset {recordId} updated successfully",
    "deleteEmployeeAssetSuccess": "Employee asset for employee {employeeId} deleted successfully",
    "getAllEmployeeAssetsSuccess": "All employee assets retrieved successfully",
    "createVendorSuccess": "Vendor '{vendorName}' created successfully",
    "getVendorSuccess": "Vendor {recordId} retrieved successfully",
    "updateVendorSuccess": "Vendor {recordId} updated successfully",
    "deleteVendorSuccess": "Vendor {recordId} deleted successfully",
    "getAllVendorsSuccess": "All vendors retrieved successfully",
    "addVendorAssetSuccess": "Vendor asset added successfully",
    "getVendorAssetSuccess": "Vendor asset {recordId} retrieved successfully",
    "updateVendorAssetSuccess": "Vendor asset {recordId} updated successfully",
    "deleteVendorAssetSuccess": "Vendor asset {recordId} deleted successfully",
    "getAllVendorAssetsSuccess": "All vendor assets retrieved successfully",
    "addAssetSuccess": "Asset '{assetName}' added successfully",
    "getAssetSuccess": "Asset {recordId} retrieved successfully",
    "updateAssetSuccess": "Asset {recordId} updated successfully",
    "deleteAssetSuccess": "Asset {recordId} deleted successfully",
    "deleteAssetBlocked": "Asset cannot be deleted as it is in use",
    "deleteAssetConflict": "Selected asset has an assigned status",
    "getAllAssetsSuccess": "All assets retrieved successfully",
    "getAllAssetsByAssetTypeSuccess": "Assets for asset type {assetTypeId} retrieved successfully",
    "getUnassignedAssetsForUserSuccess": "Unassigned assets for user {userId} retrieved successfully",
    "getUnassignedAssetsSuccess": "All unassigned assets retrieved successfully",
     "attributeInUse": "Asset Attribute Value cannot be deleted as it is in use"
  },
  "attendance": {
    "createGeneralSettingsSuccess": "General settings created successfully for company {companyId}",
    "createGeneralSettingsFailure": "Failed to create general settings",
    "getGeneralSettingsSuccess": "General settings retrieved successfully for company {companyId}",
    "getGeneralSettingsFailure": "General settings not found",
    "updateGeneralSettingsSuccess": "General settings {recordId} updated successfully",
    "updateGeneralSettingsFailure": "Failed to update general settings",
    "createRegularizationReasonSuccess": "Regularization reason created successfully for company {companyId}",
    "createRegularizationReasonFailure": "Failed to create regularization reason",
    "getRegularizationReasonSuccess": "Regularization reason {recordId} retrieved successfully",
    "getRegularizationReasonFailure": "Regularization reason not found",
    "updateRegularizationReasonSuccess": "Regularization reason {recordId} updated successfully",
    "updateRegularizationReasonFailure": "Failed to update regularization reason",
    "deleteRegularizationReasonSuccess": "Regularization reason {recordId} deleted successfully",
    "deleteRegularizationReasonFailure": "Regularization reason not found",
    "getAllRegularizationReasonsSuccess": "All regularization reasons retrieved successfully for company {companyId}",
    "createAttendanceModeSuccess": "Attendance mode created successfully for company {companyId}",
    "createAttendanceModeFailure": "Failed to create attendance mode",
    "getAttendanceModeSuccess": "Attendance mode {recordId} retrieved successfully",
    "getAttendanceModeFailure": "Attendance mode not found",
    "updateAttendanceModeSuccess": "Attendance mode {recordId} updated successfully",
    "updateAttendanceModeFailure": "Failed to update attendance mode",
    "deleteAttendanceModeSuccess": "Attendance mode {recordId} deleted successfully",
    "deleteAttendanceModeFailure": "Attendance mode not found",
    "getAllAttendanceModesSuccess": "All attendance modes retrieved successfully",
    "createAttendanceTemplateSuccess": "Attendance template created successfully for company {companyId}",
    "attendanceTemplateNotFound": "Attendance template not found",
    "invalidAttendanceTemplate": "Invalid attendance template",
    "createAttendanceRegularizationSuccess": "Attendance regularization created successfully for company {companyId}",
    "attendanceRegularizationExists": "Attendance regularization with this template already exists",
    "lopAlreadyProcessed": "LOP already processed for user {userId}",
    "attendanceProcessExists": "Attendance process for this period already exists",
    "attendanceProcessNotFound": "Attendance process for this period not found",
    "cannotDeleteAttendanceProcess": "Cannot delete attendance process as it has been exported to payroll",
    "getRosterShiftAssignmentSuccess": "Roster shift assignment retrieved successfully for ID {recordId}",
    "getRosterShiftAssignmentFailure": "Roster shift assignment not found",
    "getRosterShiftAssignmentByUserSuccess": "Roster shift assignment retrieved successfully for user {userId}",
    "getRosterShiftAssignmentByUserFailure": "Roster shift assignment not found for user",
    "createEmployeeDutyRequestSuccess": "Employee duty request created successfully for company {companyId}",
    "createEmployeeDutyRequestFailure": "Failed to create employee duty request",
    "userOnDutyTemplateNotFound": "User on-duty template not assigned for current user",
    "employeeOnDutyRequestExists": "Employee on-duty request already assigned for current user",
    "updateEmployeeDutyRequestSuccess": "Employee duty request {recordId} updated successfully",
    "updateEmployeeDutyRequestFailure": "Employee duty request not found",
    "deleteEmployeeDutyRequestSuccess": "Employee duty request {recordId} deleted successfully",
    "deleteEmployeeDutyRequestFailure": "Employee duty request not found",
    "getAllEmployeeDutyRequestsSuccess": "All employee duty requests retrieved successfully for company {companyId}",
    "getAllEmployeeDutyRequestsFailure": "Failed to retrieve employee duty requests",
    "mappedTimlogToAttendanceSuccess": "Time logs mapped to attendance successfully for company {companyId}",
    "mappedTimlogToAttendanceFailure": "Failed to map time logs to attendance",
    "uploadAttendanceJSONSuccess": "Attendance records processed successfully",
    "uploadAttendanceJSONFailure": "Failed to process attendance records",
    "invalidAttendanceJSONFormat": "Invalid format: Data should be an array of objects",
    "processAttendanceAndLOPSuccess": "Attendance and LOP processed successfully for user {userId}",
    "processAttendanceAndLOPFailure": "Failed to process attendance and LOP",
    "lopAlreadyProcessedForUser": "LOP already processed for user {userId}",
    "processAttendanceUpdateSuccess": "Attendance processed successfully for period {attendanceProcessPeriod}",
    "processAttendanceUpdateFailure": "Failed to process attendance",
    "processAttendanceSuccess": "Attendance processed successfully for period {attendanceProcessPeriodMonth}-{attendanceProcessPeriodYear}",
    "processAttendanceFailure": "Failed to process attendance",
    "deleteAttendanceSuccess": "Attendance process deleted successfully for period {attendanceProcessPeriodMonth}-{attendanceProcessPeriodYear}",
    "deleteAttendanceFailure": "Failed to delete attendance process",
    "getOvertimeByUserSuccess": "Overtime records retrieved successfully for user {userId}",
    "getOvertimeByUserFailure": "Overtime records not found for user"
  },
  "auth": {
    "signupSuccess": "User signed up successfully for company {companyId}",
    "signupFailure": "Failed to sign up user",
    "webSignupSuccess": "User and company signed up successfully",
    "webSignupFailure": "Failed to sign up user and company",
    "createUserSuccess": "User created successfully for company {companyId}",
    "createUserFailure": "Failed to create user",
    "userLimitExceeded": "You have reached the user limit for your subscription plan. Cannot add more than {maxUsers} users. Please upgrade your plan.",
    "loginSuccess": "User logged in successfully",
    "loginFailure": "Failed to log in",
    "emailOrPasswordMissing": "Email or password not specified",
    "incorrectEmailOrPassword": "Incorrect email or password",
    "notLoggedIn": "You are not logged in! Please log in to get access",
    "userNotFound": "The user belonging to this token does no longer exist",
    "passwordChanged": "User recently changed password. Please log in again",
    "subscriptionInactive": "Your subscription is not active. Please contact your administrator",
    "forgotPasswordSuccess": "Password reset email sent successfully",
    "forgotPasswordNoUser": "No account found with this email address",
    "emailSendFailure": "There was an error sending the email. Try again later",
    "resetPasswordSuccess": "Password reset successfully",
    "invalidOrExpiredToken": "Token is invalid or has expired",
    "sendLogSuccess": "Log emails sent successfully",
    "sendLogFailure": "Failed to send log emails",
    "updatePasswordSuccess": "Password updated successfully for user {userId}",
    "updatePasswordFailure": "Failed to update password",
    "incorrectCurrentPassword": "Your current password is wrong",
    "updateUserByInvitationSuccess": "User updated successfully by invitation",
    "updateUserByInvitationFailure": "Failed to update user by invitation",
    "addRoleSuccess": "Role {roleName} added successfully for company {companyId}",
    "addRoleFailure": "Failed to add role",
    "deleteRoleSuccess": "Role deleted successfully",
    "deleteRoleFailure": "Failed to delete role",
    "roleInUse": "Role is already in use. Please delete related records before deleting the role",
    "roleNotFound": "No role found",
    "getRoleSuccess": "Role retrieved successfully",
    "getRolesSuccess": "Roles retrieved successfully for company {companyId}",
    "addSubordinateSuccess": "Subordinate added successfully for user {userId}",
    "addSubordinateFailure": "Failed to add subordinate",
    "subordinateExists": "User subordinate already exists",
    "getSubordinatesSuccess": "Subordinates retrieved successfully for user {userId}",
    "getSubordinatesFailure": "Failed to retrieve subordinates",
    "deleteSubordinatesSuccess": "Subordinate deleted successfully",
    "deleteSubordinatesFailure": "Failed to delete subordinate",
    "getRolePermissionSuccess": "Role permission retrieved successfully",
    "getRolePermissionFailure": "No role permission found",
    "getAllRolePermissionsSuccess": "All role permissions retrieved successfully",
    "getAllRolePermissionsFailure": "Failed to retrieve role permissions",
    "createRolePermissionSuccess": "Role permission created successfully for company {companyId}",
    "createRolePermissionFailure": "Failed to create role permission",
    "rolePermissionExists": "Role permission already exists",
    "updateRolePermissionSuccess": "Role permission updated successfully",
    "updateRolePermissionFailure": "Failed to update role permission",
    "deleteRolePermissionSuccess": "Role permission deleted successfully",
    "deleteRolePermissionFailure": "No role permission found with that ID"
  } ,
  "company": {    
    "notFound": "No document found with that ID",
    "companyIdMissing": "Company information missing in cookies",
    "serverError": "Server error",
    "holidayNotFound": "Holiday Calendar not found",
    "zoneNotFound": "Zone not found",
    "locationNotFound": "Location not found",
    "departmentNotFound": "Department not found",
    "subDepartmentNotFound": "SubDepartment not found",
    "designationNotFound": "Designation not found",
    "bandNotFound": "Band not found",
    "signatoryNotFound": "Signatory not found",
    "taxSlabNotFound": "Tax slab not found"  
  },
  "dashboardController": {
    "userIdAndDateRequired": "User ID and Date are required.",
    "invalidDateFormat": "Invalid date format."
  },
  "documents": {
    "companyPolicyDocumentNotFound": "Company Policy Document not found",
    "companyPolicyDocumentInUse": "Company Policy Document is already in use. Please delete related records before deleting the Company Policy Document.",
    "entryNotFound": "No entry found with that ID",
    "documentNotFound": "No document found with that ID",
    "documentInUse": "Document cannot be deleted as it is in use",
    "documentAppliedToNotFound": "No DocumentAppliedTo found with that ID",
    "documentCategoryNotFound": "Document category not found",
    "documentCategoryInUse": "Document Category cannot be deleted as it is in use",
    "documentUsersNotFound": "DocumentUsers not found",
    "templateNotFound": "No Template found with that ID",
    "userDocumentNotFound": "No document found with that ID"
  },
  "error": {
    "invalidField": "Invalid {path}: {value}.",
    "duplicateField": "Duplicate field value: {value}, please use another value!",
    "invalidInputData": "Invalid input data. {errors}.",
    "invalidToken": "Invalid token. Please log in again.",
    "tokenExpired": "Your token has expired. Please log in again.",
    "genericError": "Something went very wrong."
  },
  "eventNotification": {
    "eventNotificationNotFound": "Event notification not found",
    "eventNotificationTypeNotFound": "Event notification type not found",
    "userNotificationNotFound": "User notification not found",
    "noCompanyId": "No companyId found in cookies",
    "invalidCompanyId": "Invalid companyId format",
    "requiredFieldsMissing": "User, notification, and action are required",
    "notificationAlreadyAssigned": "Notification already assigned to this user",
    "notificationNotFoundForUser": "Notification not found for this user",
    "notificationUnassigned": "Notification successfully unassigned",
    "invalidAction": "Invalid action",
    "userAndCompanyIdRequired": "User ID and Company ID are required",
    "userIdRequired": "User ID is required",
    "userAndNotificationIdRequired": "User ID and Notification ID are required",
    "userNotificationLinkNotFound": "User notification link not found"
  },
  "expense": {
    "companyInfoMissing": "Company information is missing in cookies. Please ensure you are logged in correctly.",
    "labelInUse": "This label is already in use for another category. Please choose a different label.",
    "internalServerError": "An unexpected error occurred on the server. Please try again later.",
    "categoryInUse": "This expense category is already in use. Please delete related records before deleting the category.",
    "categoryNotFound": "Expense category not found.",
    "companyIdNotFound": "Company ID not found in cookies. Please ensure you are logged in correctly.",
    "invalidRequestData": "Invalid request data provided. Please check your input and try again.",
    "applicationFieldNotFound": "Expense application field with ID {{id}} not found.",
    "applicationFieldUpdated": "Expense application field(s) successfully updated or created.",
    "fieldValueNotFound": "Expense application field value with ID {{id}} not found.",
    "policyLabelRequired": "Policy label is required to create an expense template.",
    "policyLabelExists": "This policy label already exists. Please use a unique label.",
    "categoryNotInRequest": "Expense category details are missing in the request.",
    "invalidCategory": "One or more categories provided are invalid.",
    "templateNotFound": "Expense template not found.",
    "templateInUse": "This expense template is already in use. Please delete related records before deleting the template.",
    "employeeAssignmentNotFound": "Employee expense assignment not found.",
    "expensesNeedClosure": "There are pending expenses that need to be closed before this action can be completed.",
    "reportCreated": "Expense report successfully created.",
    "reportNotFound": "Expense report not found.",
    "reportInUse": "This expense report is already in use. Please delete related records before deleting the report.",
    "attachmentPropertiesMissing": "All attachment properties (type, name, size, extension, file) must be provided.",
    "reportExpenseNotFound": "Expense report expense not found.",
    "advanceNotFound": "Expense advance not found for the given user.",
    "advanceCategoryNotInRequest": "Advance category details are missing in the request.",
    "advanceTemplateNotFound": "Advance template not found.",
    "userNotFound": "User not found."
  },
  "feedback": {
    "feedbackFieldNotFound": "Feedback field not found",
    "noFeedbackFieldsForCompany": "No feedback fields found for this company",
    "feedbackNotFound": "Feedback not found",
    "noFeedbackForStore": "No feedback found for this store",
    "noFeedbackForCompany": "No feedback found for this company",
    "invalidFeedbackFieldId": "Invalid feedback field ID: {{fieldId}}",
    "requiredFieldMissing": "Value for required field '{{fieldName}}' is missing",
    "barcodeNotFound": "Barcode not found",
    "noBarcodesForCompany": "No barcodes found for this company",
    "barcodeRequiredFieldsMissing": "storeId, tableId, and url are required"
  },
  "genericSetting": {
    "settingNotFound": "Generic setting not found",
    "settingValueNotFound": "Generic setting value not found",
    "settingListDataNotFound": "Generic setting list data not found",
    "noSettingsForUser": "No generic settings found for this user and company"
  },
  "handlerFactory": {
    "documentNotFound": "No document found with that ID"
  },
  "interviewProcess": {
    "applicationStatusExists": "Application status already exists for this company",
    "applicationStatusNotFound": "Application status not found",
    "candidateNotFound": "Candidate not found",
    "candidateApplicationStatusNotFound": "Candidate application status not found",
    "candidateDataFieldNotFound": "Candidate data field not found",
    "noCandidateDataFieldsForCompany": "No candidate data fields found for the company",
    "candidateDataFieldValueNotFound": "Candidate data field value not found",
    "noCandidateDataFieldValuesForCompany": "No candidate data field values found for the company",
    "candidateInterviewDetailsNotFound": "Candidate interview details not found",
    "noCandidateInterviewDetailsForCompany": "No candidate interview details found for the company",
    "feedbackFieldNotFound": "Feedback field not found",
    "noFeedbackFieldsForCompany": "No feedback fields found for the company",
    "feedbackFieldValueNotFound": "Feedback field value not found",
    "noFeedbackFieldValuesForCompany": "No feedback field values found for the company",
    "interviewerNotFound": "Interviewer not found",
    "'RecordUpdatedSuccessfully'": "Record updated successfully",
    "'RecordCreatedSuccessfully'": "Record created successfully"
  },
  "leave": {
    "generalSettingNotFound": "General setting not found",
    "leaveCategoryNotFound": "Leave category not found",
    "leaveCategorySystemGenerated": "Leave category is system-generated and cannot be deleted",
    "leaveCategoryInUse": "Leave category is added against a leave template and cannot be deleted",
    "leaveTemplateNotFound": "Leave template not found",
    "leaveTemplateLabelRequired": "Label is required",
    "leaveTemplateLabelExists": "Leave template label already exists",
    "leaveCategoriesRequired": "Leave categories are required",
    "leaveCategoryInvalid": "Invalid leave category",
    "employeeLeaveAssignmentNotFound": "Employee leave assignment not found",
    "leaveNeedsClosure": "Leave needs to be closed first before deleting assignment",
    "companyIdNotFound": "Company ID not found in cookies",
    "usersRequired": "Users are required",
    "leaveAlreadyGranted": "Leave already granted for the same user on the same date",
    "employeeLeaveGrantNotFound": "Employee leave grant not found",
    "userInvalid": "Invalid user",
    "leaveGrantDateExists": "Leave grant for the same user and date already exists",
    "leaveApplicationNotFound": "Employee leave application not found",
    "shortLeaveNotFound": "Short leave not found",
    "leaveTemplateCategoryNotFound": "Leave template category not found",
    "invalidRequestData": "Invalid request data"
  },
  "liveTracking": {
    "userAlreadyAdded": "User already added for live tracking",
    "noLiveTrackingDataFound": "No live tracking data found",
    "userNotFoundInLiveTracking": "User not found in live tracking",
    "invalidUserData": "Invalid user data provided"
  },
  "manualTime": {
    "userNotFound": "There is no user with the provided email or ID",
    "dateRequired": "Date is required",
    "fromDateRequired": "From Date is required",
    "toDateRequired": "To Date is required",
    "managerNotFound": "There is no manager with the provided ID",
    "taskNotFound": "There is no task with the provided ID",
    "projectRequired": "Project is required",
    "invalidDateRange": "From Date must be earlier than To Date",
    "timeEntryOverlap": "Time entry overlaps with an existing record. Please adjust the time",
    "manualTimeRequestNotFound": "No manual time request found with that ID"
  },
  "payroll": {
    "companyIdNotFound": "Company ID not found in cookies",
    "generalSettingNotFound": "General Setting not found",
    "invalidGeneralSetting": "Invalid General Setting",
    "roundingRuleNotFound": "Rounding Rule not found",
    "pfTemplateNotFound": "PF Template not found",
    "fixedAllowancesNotFound": "Fixed Allowances not found",
    "fixedContributionSlabNotFound": "Fixed Contribution Slab not found",
    "lwfFixedDeductionMonthNotFound": "LWF Fixed Deduction Month not found",
    "ptConfigureStateNotFound": "PT Configure State not found",
    "ptSlabNotFound": "PT Slab not found",
    "ptDeductionMonthNotFound": "PT Deduction Month not found",
    "ceilingAmountNotFound": "Ceiling Amount not found",
    "esicContributionNotFound": "ESIC Contribution not found",
    "variableAllowanceNotFound": "Variable Allowance not found",
    "fixedDeductionNotFound": "Fixed Deduction not found",
    "variableDeductionNotFound": "Variable Deduction not found",
    "otherBenefitsNotFound": "Other Benefits not found",
    "loanAdvancesCategoryExists": "Loan Advances Category already exists",
    "loanAdvancesCategoryNotFound": "Loan Advances Category not found",
    "noLoanAdvancesCategoriesFound": "No Loan Advances Categories found for the specified company",
    "flexiBenefitsCategoryExists": "Flexi Benefits Category already exists for this company",
    "flexiBenefitsCategoryNotFound": "Flexi Benefits Category not found",
    "ctcTemplateNotFound": "CTC Template not found",
    "nameRequired": "Name is required",
    "ctcTemplateFixedAllowanceNotExists": "CTC Template Fixed Allowance does not exist in request",
    "invalidFixedAllowances": "Invalid Fixed Allowances",
    "invalidFixedDeduction": "Invalid Fixed Deduction",
    "invalidVariableAllowance": "Invalid Variable Allowance",
    "invalidVariableDeduction": "Invalid Variable Deduction",
    "invalidFixedContribution": "Invalid Fixed Contribution",
    "invalidOtherBenefits": "Invalid Other Benefits",
    "invalidEmployeeDeduction": "Invalid Employee Deduction",
    "payrollNotFound": "Payroll not found",
    "payrollUserNotFound": "Payroll User not found",
    "invalidPayrollUser": "Invalid Payroll User",
    "payrollAttendanceSummaryNotFound": "Payroll Attendance Summary not found",
    "payrollVariablePayNotFound": "Payroll Variable Pay Deduction not found",
    "payrollManualArrearsNotFound": "Payroll Manual Arrears not found",
    "payrollLoanAdvanceNotFound": "Payroll Loan/Advance not found",
    "payrollIncomeTaxNotFound": "Payroll Income Tax record not found",
    "flexiBenefitsAndPFTaxNotFound": "Flexi Benefits and PF Tax record not found",
    "payrollOvertimeNotFound": "Payroll Overtime record not found",
    "payrollStatutoryNotFound": "Payroll Statutory record not found",
    "payrollFNFUsersNotFound": "Payroll FNF Users not found",
    "payrollFNFAttendanceSummaryNotFound": "Payroll FNF Attendance Summary not found",
    "payrollFNFVariablePayNotFound": "Payroll FNF Variable Pay Deduction not found",
    "payrollFNFManualArrearsNotFound": "Payroll FNF Manual Arrears not found",
    "payrollFNFTerminationCompensationNotFound": "Payroll FNF Termination Compensation not found",
    "payrollFNFLoanAdvanceNotFound": "Payroll FNF Loan Advance not found",
    "payrollFNFStatutoryBenefitsNotFound": "Payroll FNF Statutory Benefits not found",
    "payrollFNFFlexiBenefitsAndPFTaxNotFound": "Payroll FNF Flexi Benefits and PF Tax record not found",
    "payrollFNFIncomeTaxNotFound": "Payroll FNF Income Tax record not found",
    "payrollFNFOvertimeNotFound": "Payroll FNF Overtime record not found"  ,
    "LWFFixedDeductionMonthsUpdatedSuccessfully": "LWFFixedDeductionMonths updated successfully",
    "LWFFixedDeductionMonthNotFound": "LWFFixedDeductionMonth not found",
    "RecordNotFound": "Record not found",
    "'RecordSuccessfullyDeleted'": "Record successfully deleted",
  "OvertimeRecordSuccessfullyDeleted": "Payroll Overtime record successfully deleted"
  },
  "pricing": {
    "employeeAssignmentNotFound": "Employee Advance Assignment not found",
    "expensesNeedClosure": "Expenses need to be closed before deleting the assignment",
    "categoryNotFound": "Expense category not found",
    "optioninclusionNotFound": "Option Inclusion Details not found",
    "offerinclusionNotFound": "Offer Inclusion Details not found",
    "includeDetailsNotFound": "Include Details not found",
    "prerequisitesNotFound": "Prerequisites Details not found",
    "companyPlanNotFound": "Company Plan Details not found",
    "planOfferNotFound": "Plan Offer Details not found",
    "userGroupNotFound": "User Group Details not found",
    "LabelAlreadyInUse": "Label already in use for another software",
    "'LabelAlreadyInUseForAnotherOption'": "'Label already in use for another option",
    "LabelAlreadyInUseForAnotherPlan": "Label already in use for another plan",
    "NameAlreadyInUseForSameSoftware": "'Name already in use for Same Software",
    "InvalidPlan": "Invalid plan or option ID",
    "OptionSuccessfullyRemoved": "Option successfully removed from the plan",
    "OfferSuccessfullyRemoved": "Offer successfully removed from the plan",
    "'InvalidPlanOrOfferID'": "Invalid plan or offer ID",
    "IncludeDetailsNotFound": "Include Details not found",
    "PlanSuccessfullyRemovedFromTheOffer": "Plan successfully removed from the offer",
    "NameAlreadyInUseForAnotherUserGroup": "Name already in use for another UserGroup"
  },
  "productivity": {
    "modelCreated": "Productivity Model created successfully",
    "modelNotFound": "Productivity Model not found",
    "creationFailed": "Failed to create Productivity Model",
    "updateFailed": "Failed to update Productivity Model",
    "deletionFailed": "Failed to delete Productivity Model",
    "modelDeleted": "Productivity Model deleted successfully"
  },
  "projectController": {
    "projectNotFound": "No project found with that ID",
    "projectUserNotFound": "No project user found with that ID",
    "projectInUse": "Project is already in use. Please delete related records before deleting the Project.",
    "projectUserExists": "Project User already exists."
  },
  "recruitment": {
    "skillNotFound": "No skill found with that ID",
    "roleNotFound": "No role found with that ID",
    "industryNotFound": "No industry found with that ID",
    "creationFailed": "Failed to create resource"
  },
  "report": {
    "internalServerError": "Internal server error"
  },
  "separation": {
    "resignationNotFound": "Resignation not found",
    "resignationMustBePending": "Resignation status must be pending to update",
    "invalidResignationStatus": "Invalid resignation status provided. Valid statuses are: Pending, Completed, Appealed, Deleted.",
    "userNotFound": "User not found",
    "terminationNotFoundOrNotPending": "Termination not found or not in pending status",
    "terminationRecordNotFound": "Termination record not found",
    "invalidTerminationStatus": "Invalid termination status provided. Valid statuses are: Pending, Completed, Appealed.",
    "companyIdNotFound": "Company ID not found in cookies",
    "separationTypeNotFound": "SeparationType not found",
    "exitInterviewQuestionNotFound": "ExitInterviewQuestion not found",
    "exitInterviewOptionsNotFound": "ExitInterviewQuestionOptions not found",
    "exitInterviewAnswerNotFound": "Exit Interview Question Answer not found",
    "separationTemplateSettingNotFound": "Separation Template Setting not found",
    "initiateSeparationRequestNotFound": "InitiateSeparationRequest not found",
    "separationRequestNotFound": "Separation Request not found",
    "separationTypeInUse": "Separation Type is already in use. Please delete related records before deleting the Separation Type.",
    "ExitInterviewQuestionAlreadyInUse": "Exit Interview Question is already in use. Please delete related records before deleting the Exit Interview Question."
  },
  "settings": {
    "productivityNotFound": "No productivity found with that ID",
    "invalidInputData": "Invalid input data",
    "companyIdRequired": "Company ID is required",
    "userLocationNotFound": "User location not found",
    "internalServerError": "Internal Server Error",
    "NoChangesMade": "No changes made",
    "LocationAddedSuccessfully": "Location added successfully",
    "LocationUpdatedSuccessfully": "Location updated successfully",
    "LocationDeletedSuccessfully": "Location deleted successfully"
  },
  "task": {
    "timeLogExists": "TimeLog is already added for the task, We can't delete task.",
    "documentNotFound": "No document found with that ID",
    "invalidProject": "Invalid project",
    "taskNotFound": "Task not found",
    "invalidUserOrTask": "Invalid user / task",
    "taskAlreadyExists": "A task with this name already exists",
    "taskUserAlreadyExists": "Task User already exists.",
    "failedToFetchTaskList": "Failed to fetch task list",
    "invalidAttachmentProperties": "All attachment properties must be provided",
    "sameUserAlreadyAssigned": "Same user already assigned",
    "invalidTaskOrTag": "Invalid task / tag",
    "tagAlreadyExists": "Tag already exists.",
    "tagInUse": "Tag is already added for the task, We can't delete it.",
    "serverError": "Server error"
  },
  "timeLog": {
    "deviceMismatch": "User is logged in on another device, Do you want to make it active?",
    "userIdRequired": "User ID is required",
    "coordinatesRequired": "Latitude and Longitude are required",
    "checkInTimeRequired": "Check-in time is required",
    "checkOutTimeRequired": "Check-out time is required",
    "projectTaskRequired": "Project and Task are required",
    "noOpenCheckIn": "No open check-in record found",
    "serverError": "Internal server error",
    "CheckedInSuccessfully": "Checked in successfully"
  },
  "user": {
    "noDocumentFound": "No document found with that ID",
    "noUserFound": "No user found with that ID",
    "companyIdRequired": "Company ID not found in cookies",
    "passwordUpdateNotAllowed": "You cannot update password using this route. Please use /updateMyPassword",
    "noAppointmentFound": "No appointment found with that ID",
    "invalidStatus": "Invalid status value",
    "noUsersForEmpCode": "No users found with the provided empCode and companyId",
    "invalidObjectId": "Invalid ObjectId: {{id}}",
    "noEmploymentFound": "UserEmployment not found",
    "noSalaryDetailsFound": "Employee Salary Details not found",
    "noSettingsFound": "Employee settings not found",
    "noSalutatoryDetailsFound": "Employee Salutatory Details not found",
    "noLoanAdvanceFound": "Employee Loan Advance not found",
    "emailError": "There was an error sending the email. Try again later",
    "invalidComponent": "{{id}} is not a valid {{type}}",
    "missingAttachmentProperties": "All attachment properties must be provided",
    "noDeclarationsFound": "No declarations found for this company",
    "noTaxDeclarationFound": "Employee income tax declaration not found",
    "invalidOtp": "Invalid or expired OTP",
    "otpNotFound": "OTP not found",
    "noUser": "User not found",
    "missingProfileImageProperties": "All Profile Image properties must be provided",
    "ErrorCancellingOTP": "Error cancelling OTP",
    "OTPCancelledSuccessfully.": "OTP cancelled successfully",
    "ErrorVerifyingOTP": "Error verifying OTP",
    "otpVerifiedSuccessfully": "OTP verified successfully"
  },
  "userPreferences": {
    "categoryNotFound": "Preference category not found",
    "optionNotFound": "Preference option not found",
    "preferenceExists": "Given preference already exists",
    "preferenceNotFound": "User preference not found"
  },
  "zoom": {
    "meetingCreationFailed": "Unable to generate meeting link",
    "internalServerError": "Internal server error",
     "accessTokenFailed": "Failed to get access token"
  }
}